user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    client_max_body_size 10000M;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    proxy_max_temp_file_size 0;

    map $http_origin $cors {
        default "";
        ~^https?://(brain100\.help|www\.brain100\.help)$ $http_origin;
    }

    # Global rate limit zone
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    server {
        listen 80;
        server_name brain100.help www.brain100.help 155.212.246.127;

        # ✅ ACME Challenge for Certbot
        location /.well-known/acme-challenge/ {
            root /usr/share/nginx/html;
        }

        # ✅ Redirect all other HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name brain100.help www.brain100.help;

        # SSL certificates (mounted from certbot volume)
        ssl_certificate     /etc/letsencrypt/live/brain100.help/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/brain100.help/privkey.pem;

        # OCSP Stapling (reduces client certificate validation time)
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/brain100.help/chain.pem;
        resolver 127.0.0.11 1.1.1.1 1.0.0.1 valid=300s;
        resolver_timeout 5s;

        # Strong modern SSL configuration
        ssl_protocols TLSv1.3 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy no-referrer-when-downgrade always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

         location / {
            proxy_pass http://br-web:5174;
            proxy_read_timeout 120s;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

         location /br-general {
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' $cors always;
                add_header 'Vary' 'Origin' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
                add_header 'Access-Control-Max-Age' 3600 always;
                return 204;
            }

            proxy_pass http://br-general-python:8000;
            proxy_read_timeout 120s;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' $cors always;
            add_header 'Vary' 'Origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;

            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 20;
            error_page 429 = @rate_limited;
        }

         location /grafana/ {
            set $upstream grafana:3000;
            proxy_pass http://$upstream/;
            proxy_read_timeout 120s;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            rewrite ^/grafana/(.*)$ $1 break;
        }

    }

    include /etc/nginx/conf.d/*.conf;

    location @rate_limited {
        add_header Retry-After 5 always;
        return 429 '{"error": "Too many requests"}';
    }
}
